#!/usr/bin/env bash

#this script uses python2.7 - it has not been tested with python3

#run with non-defaults: ./sisrs -r ./reference.fasta -p 40 -f fastq -m 4 -a ./fastq_data/
#for paired reads the filename should contain either _R1 or _R2

VERSION=1.6

help() {
    cat <<ENDLINE
    
 SISRS: Site Identification from Short Read Sequences
 Version 1.6
 Copyright (c) 2013-2015 Rachel Schwartz <Rachel.Schwartz@asu.edu>
 https://github.com/rachelss/SISRS
Usage:
 sisrs command options
By default, SISRS assumes that
 * A reference genome is not available.
 * The K-mer size to be used by Velvet in contig assembly is 21.
 * Only one processor is available.
 * Files are in fastq format.
 * A site is only required to have data for two species to be included
   in the final alignment.
 * Folders containing reads are in the present working directory.
 * A minimum of three reads are required to call the base at a site
   for a taxon.
Commands:
 sites : produce an alignment of sites from raw reads
 alignContigs : run sisrs sites skipping the composite genome assembly
 mapContigs : run sisrs sites, also skipping alignment of reads to composite genome
 identifyFixedSites : run sisrs sites, also skipping mapping of contigs to a reference
 outputAlignment : run sisrs sites, also skipping determination of fixed sites calls
 changeMissing : given alignment of sites output a file with only sites missing
        fewer than a specified number of samples per site
 loci : produce a set of aligned loci based on the most variable regions of
        the composite genome
 
Flags:
    
 -g : MANDATORY if running sisrs from the beginning - the approximate genome size
      - this will reduce the size of the composite assembly by using a subset
      of reads to approximate 10x coverage
 -p : use this number of processors
 -r : the path to the reference genome in fasta format
 -k : k-mer size (for assembly)
 -f : the folder containing the folders of reads
 -n : the number of reads required to call a base at a site
 -t : the threshold for calling a site; e.g. 0.99 means that >99% of
      bases for that taxon must be one allele; only recommended for
      low ploidy with <3 individuals
 -m : the number of species that are allowed to have missing data at
      a site
 -o : the length of the final loci dataset for dating
 -l : the number of alleles
 -a : assembler (velvet, minia, or abyss)
 Example command:
 sisrs sites -g 1745690 -p 40 -m 4 -f test_data
 
 Example command:
 sisrs loci -g 1745690 -p 40 -m 4 -f test_data
ENDLINE
}

#use defaults or input values
KMER=21
MINREAD=3
PROCESSORS=1
MAINFOLDER=.
THRESHOLD=1
ALLELES=1
DEBUG=0
ASSEMBLER=velvet
OUTLENGTH=500000
CMD=$1

cmds=(subSample buildContigs alignContigs mapContigs identifyFixedSites outputAlignment changeMissing)
if [[ "${CMD}" != "sites" ]] && [[ "${CMD}" != "loci" ]] && [[ ! "${cmds[*]}" =~ $CMD ]]; then
    help
    exit 0
fi 
    
OPTIND=2 # tells getopts to start parsing at the second argument

while getopts g:r:k:p:m:a:f:n:t:o:l:hd option
do
    case "${option}"
	in
	g) GENOMESIZE=${OPTARG};;
	r) REFFILE=${OPTARG};;
	k) KMER=${OPTARG};;
	p) PROCESSORS=${OPTARG};;
	m) MISSING=${OPTARG};;
	f) MAINFOLDER=${OPTARG};;
        a) ASSEMBLER=${OPTARG};;
	n) MINREAD=${OPTARG};;
	t) THRESHOLD=${OPTARG};;
        o) OUTLENGTH=${OPTARG};;
        l) ALLELES=${OPTARG};;
	d) DEBUG=1;;
	h) help; exit;;
	\? ) echo "Unknown option" >&2; exit 1;;
    esac
done

echo "Would you like to create a new metrics file?"
select yn in "Yes" "No"; do
case $yn in
Yes ) echo "Data_Set_File_Path" "Size_Of_Data_Set_kiB" "Name_Of_Assembler" "Number_of_Processors" "Genome_Size_bp" "Time_Seconds" "N50" "Number_of_Contigs" "biallelic_sites" "singletons" "variable_sites" "RAM" "kmer_size" "missing" > metrics_file.txt; break;;
No ) echo "" >> metrics_file.txt; break;;
esac
done

START=$(date +%s)

DIRS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"    #where is the sisrs file?
DIR=$( dirname ${DIRS} )                                    #go one level up from location of sisrs file
MAINFOLDER=$( echo "${MAINFOLDER}" | sed -e "s/\/*$//" )    #remove trailing / if necessary

FILEID=_R1
FILEID2=$(echo ${FILEID} | sed 's/1/2/')

######checks########

if [[ "${ALLELES}" != "1" ]] && [[ "${ALLELES}" != "2" ]]; then
    echo "You must have either 1 or 2 alleles (1 is the default). Aborting."; exit 1;
fi

if [[ $ASSEMBLER == "velvet" ]]; then
    which velveth &>/dev/null
    [ $? -eq 0 ] || { echo "Velvet must be installed to run SISRS. The installation folder must be in your path. Velvet is called as 'velveth' and 'velvetg'.    Aborting."; exit 1; }
    CONTIGS=velvetoutput
elif [[ $ASSEMBLER == "minia" ]]; then
    which minia &>/dev/null
    [ $? -eq 0 ] || { echo "Minia must be installed to run SISRS. The installation folder must be in your path. Minia is called as 'minia'.    Aborting."; exit 1; }
    CONTIGS=miniaoutput
elif [[ $ASSEMBLER == "abyss" ]]; then
    which ABYSS &>/dev/null
    [ $? -eq 0 ] || { echo "Abyss must be installed to run SISRS. The installation folder must be in your path. Abyss is called as 'ABYSS'.    Aborting."; exit 1; }
    CONTIGS=abyssoutput
else
    echo "You must specify the assembler as velvet, minia, or abyss. If you do not specify an assembler SISRS will use velvet as the default.  Aborting."; exit 1;
fi

which bowtie2 &>/dev/null
[ $? -eq 0 ] || { echo "Bowtie2 must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
which parallel &>/dev/null
[ $? -eq 0 ] || { echo "GNU parallel must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
which samtools &>/dev/null
[ $? -eq 0 ] || { echo "Samtools v1 or greater must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
[[ $(samtools --version-only| cut -c1) -ge 1 ]] || { echo "Samtools v1 or greater must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }


###########actions##############

FILELISTA=( $( find "${MAINFOLDER}" -name "*fastq" ) )   

#get paired fastq
FILELIST=( $( find "${MAINFOLDER}" -name *${FILEID}*fastq ) )     #all fastq file paths as array
if [[ ${#FILELIST[@]} -gt 0 ]]; then
    declare -a ALLFOLDERLIST=()
    for F in "${FILELIST[@]}"; do ALLFOLDERLIST+=("$( dirname "${F}" )"); done       #array of directories containing fastq files
    FOLDERLIST=( $(echo "${ALLFOLDERLIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )  #sorted unique list of folders with paired fastq files as array
fi

#get unpaired fastq
FILELISTU=()
for F in "${FILELISTA[@]}"; do
    if [[ $F != *${FILEID}*fastq ]] && [[ $F != *${FILEID2}*fastq ]] && [[ $F != *subsampled* ]]; then FILELISTU+=(${F})
    fi
done
if [[ ${#FILELISTU[@]} -gt 0 ]]; then
    declare -a ALLFOLDERLISTU=()
    for F in "${FILELISTU[@]}"; do ALLFOLDERLISTU+=("$( dirname "${F}" )"); done       #array of directories containing fastq files
    FOLDERLISTU=( $(echo "${ALLFOLDERLISTU[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )  #sorted unique list of folders with unpaired fastq files as array
fi
FOLDERLISTA=( $(echo "${FOLDERLISTU[@]} ${FOLDERLIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )

if [[ ${#FOLDERLISTA[@]} -lt 1 ]]; then
    echo "There were no data files"
    exit 1
fi

if [ -z "$MISSING" ]; then MISSING=$((${#FOLDERLISTA[@]} - 2)); fi    #minimum of data for 2 species unless otherwise specified

##############################

subSample(){
    if [ -z $GENOMESIZE ]; then
        echo "You must enter the approximate size of the genome / transcriptome. For more information run sisrs -h"
        exit 1
    fi
    
    echo "Subsampling data"
    if [[ -e "${MAINFOLDER}"/subsamples ]]; then rm -r "${MAINFOLDER}"/subsamples; fi
    NUMER=$((10*${GENOMESIZE}))
    DENOM=$((100*2*${#FOLDERLISTA[@]}))      #assumes 100bp reads - add option in future
    LEFTREADS=$((${NUMER}/${DENOM}))
    mkdir ${MAINFOLDER}/subsamples
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/sub_sample_for_velvet_unshuff.py ${LEFTREADS} {} ${FILEID} ${FILEID2}" ::: "${FOLDERLISTA[@]}"   #subsample data and shuffle
    
    if [[ $? != 0 ]]; then
        echo "Subsampling failed"
        exit 1
    fi
}

buildContigs(){
    if [[ -e "${MAINFOLDER}"/"${CONTIGS}" ]]; then rm -r ${MAINFOLDER}/${CONTIGS}; fi
    if [[ $ASSEMBLER == "velvet" ]]; then
        #make reference contigs - velveth
        if [ -n "${REFFILE}" ]; then
            if [[ ${#FILELISTU[@]} -gt 0 ]]; then
                if [[ ${#FILELIST[@]} -gt 0 ]]; then
                    echo "Running Velvet with PE and SE reads, and reference"
                    velveth ${MAINFOLDER}/velvetoutput ${KMER} -create_binary -fasta -reference ${REFFILE} -fastq -shortPaired ${MAINFOLDER}/subsamples/*subsampledp.fastq -short ${MAINFOLDER}/subsamples/*subsampledu.fastq
                else
                    echo "Running Velvet with SE reads and reference"
                    velveth ${MAINFOLDER}/velvetoutput ${KMER} -create_binary -fasta -reference ${REFFILE} -fastq -short ${MAINFOLDER}/subsamples/*subsampledu.fastq
                fi
            else
                echo "Running Velvet with PE reads and reference"
                velveth ${MAINFOLDER}/velvetoutput ${KMER} -create_binary -fasta -reference ${REFFILE} -fastq -shortPaired ${MAINFOLDER}/subsamples/*subsampledp.fastq
            fi
        else
            if [[ ${#FILELISTU[@]} -gt 0 ]]; then
                if [[ ${#FILELIST[@]} -gt 0 ]]; then
                    echo "Running Velvet with PE and SE reads"
                    velveth ${MAINFOLDER}/velvetoutput ${KMER} -create_binary -fastq -shortPaired ${MAINFOLDER}/subsamples/*subsampledp.fastq -short ${MAINFOLDER}/subsamples/*subsampledu.fastq
                else
                    echo "Running Velvet with SE reads"
                    velveth ${MAINFOLDER}/velvetoutput ${KMER} -create_binary -fastq -short ${MAINFOLDER}/subsamples/*subsampledu.fastq
                fi
            else
                echo "Running Velvet with PE reads"
                velveth ${MAINFOLDER}/velvetoutput ${KMER} -create_binary -fastq -shortPaired ${MAINFOLDER}/subsamples/*subsampledp.fastq
            fi
        fi
        echo ==== Velveth is finished ====
        
        velvetg ${MAINFOLDER}/velvetoutput -exp_cov auto -cov_cutoff auto# -min_contig_lgth 100     #run velvet - output contigs
        echo ==== Velvetg is finished ===
    fi
    
    if [[ $ASSEMBLER == "minia" ]]; then
        mkdir ${MAINFOLDER}/miniaoutput
        ls ${MAINFOLDER}/subsamples/*fastq | parallel -j ${PROCESSORS} basename > ${MAINFOLDER}/subsamples/minia_read_file.txt
        minia -in ${MAINFOLDER}/subsamples/minia_read_file.txt -kmer-size ${KMER} -nb-cores "${PROCESSORS}" -out ${MAINFOLDER}/miniaoutput/
        mv ${MAINFOLDER}/miniaoutput/.contigs.fa ${MAINFOLDER}/miniaoutput/contigs.fa
    fi
    
    if [[ $ASSEMBLER == "ABYSS" ]]; then
        mkdir ${MAINFOLDER}/abyssoutput
        ABYSS -k ${KMER} -o ${MAINFOLDER}/abyssoutput/contigs.fa ${MAINFOLDER}/subsamples/*fastq
    fi
}

alignContigs(){
    bowtie2-build ${MAINFOLDER}/"${CONTIGS}"/contigs.fa ${MAINFOLDER}/"${CONTIGS}"/contigs      #index contigs
    
    #align reads to contigs
    for FILE in "${FILELIST[@]}"; do
        NAME=$( echo ${FILE} | sed s/${FILEID}// | sed 's/\.[^.]*$//' ) #includes folder but not the read or the extension
        echo ==== Aligning FILELIST ${NAME}  ====
        #N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${MAINFOLDER}/"${CONTIGS}"/contigs -1 ${FILE} -2 $( echo ${FILE}|sed s/${FILEID}/${FILEID2}/ ) > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - ${NAME}
    done
    for FILE in "${FILELISTU[@]}"; do
        NAME=$( echo ${FILE} | sed 's/\.[^.]*$//' ) #includes folder but not the read or the extension
        echo ==== Aligning FILELISTU ${NAME} ====
        #N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${MAINFOLDER}/"${CONTIGS}"/contigs -U ${FILE} > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - ${NAME}
    done
    echo ==== Done Aligning ====
}
    
mapContigs(){
    #index bam
    parallel --jobs "${PROCESSORS}" 'samtools index "$( echo {} | sed 's/"${FILEID}"//' | sed s/\.[^.]*$// )".bam' ::: "${FILELIST[@]}"
    echo ==== Done Indexing Bam Files ====
       
    #map contigs to reference
    if [ -n "${REFFILE}" ]; then
        NAME=$( echo ${REFFILE} | sed 's/\.[^.]*$//' )
        bowtie2-build ${REFFILE} ${NAME}        #bowtie2-build [options]* <reference_in> <bt2_base>
        bowtie2 -p ${PROCESSORS} -N 1 -x ${NAME} -f -U ${MAINFOLDER}/"${CONTIGS}"/contigs.fa > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) -S ${MAINFOLDER}/"${CONTIGS}"/align_contigs.sam    #bowtie2 -x <ref_base> -U <fq files> -S <output sam>
	echo ==== Done Mapping Contigs ====
    fi
}

identifyFixedSites(){
    samtools faidx ${MAINFOLDER}/${CONTIGS}/contigs.fa
    
    parallel --jobs "${PROCESSORS}" 'samtools mpileup -f' "${MAINFOLDER}"/"${CONTIGS}"/contigs.fa '"$( echo {} | sed 's/"${FILEID}"//' | sed s/\.[^.]*$// )".bam' -A '> "$( echo {} | sed 's/"${FILEID}"//' | sed s/\.[^.]*$// )".pileups' ::: "${FILELIST[@]}" "${FILELISTU[@]}"
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/specific_genome.py {} ${MAINFOLDER}/${CONTIGS}/contigs.fa" ::: "${FOLDERLISTA[@]}"
    
    if [[ $? != 0 ]]; then
        echo "specific_genome.py failed"
        exit 1
    fi

    parallel --jobs "${PROCESSORS}" "samtools faidx {}/contigs.fa" ::: "${FOLDERLISTA[@]}"
    parallel --jobs "${PROCESSORS}" 'bowtie2-build' {}/contigs.fa {}/contigs ::: "${FOLDERLISTA[@]}"
    
    #align reads to contigs
    for FILE in "${FILELIST[@]}"; do
        NAME=$( echo ${FILE} | sed s/${FILEID}// | sed 's/\.[^.]*$//' )
        echo ==== Aligning FILELIST ${NAME}  ====
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x $(dirname ${FILE})/contigs -1 ${FILE} -2 $( echo ${FILE}|sed s/${FILEID}/${FILEID2}/ ) > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - ${NAME}
    done
    for FILE in "${FILELISTU[@]}"; do
        NAME=$( echo ${FILE} | sed 's/\.[^.]*$//' )
        echo ==== Aligning FILELISTU ${NAME} ====
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x $(dirname ${FILE})/contigs -U ${FILE} > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - ${NAME}
    done
    
    parallel --jobs "${PROCESSORS}" 'samtools index "$( echo {} | sed 's/"${FILEID}"//' | sed s/\.[^.]*$// )".bam' ::: "${FILELIST[@]}"
    
    parallel --jobs "${PROCESSORS}" 'samtools mpileup -f "$(dirname {})"/contigs.fa "$( echo {} | sed 's/"${FILEID}"//' | sed s/\.[^.]*$// )".bam -A > "$( echo {} | sed 's/"${FILEID}"//' | sed s/\.[^.]*$// )".pileups' ::: "${FILELIST[@]}" "${FILELISTU[@]}"
    
    #put base for each site in a dictionary (allows no variation when calling sites)
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/get_pruned_dict.py {} ${MINREAD} ${THRESHOLD}" ::: "${FOLDERLISTA[@]}"
    if [[ $? != 0 ]]; then
        echo "get_pruned_dict.py failed"
        exit 1
    fi
    echo ==== Done Identifying Fixed Sites Without Error ====
}

outputAlignment(){
    if [ -n "${REFFILE}" ]; then
        bi_sin_var=$(${DIR}/libexec/sisrs/get_alignment.py $((${#FOLDERLISTA[@]} - 2)) ${REFFILE} ${MAINFOLDER} ${ASSEMBLER} | grep "singletons")
    else
        bi_sin_var=$(${DIR}/libexec/sisrs/get_alignment.py $((${#FOLDERLISTA[@]} - 2)) X ${MAINFOLDER} ${ASSEMBLER} | grep "singletons")      #alignment with up to all but 2 missing
    fi
    if [[ $? != 0 ]]; then
        echo "get_alignment.py failed"
        exit 1
    fi
    
}

changeMissing(){
    if [[ ${MISSING} -lt $((${#FOLDERLISTA[@]} - 2)) ]]; then
        ${DIR}/libexec/sisrs/filter_nexus_for_missing.py ${MAINFOLDER}/alignment.nex ${MISSING}       #alignment w specified number missing
    fi
    if [[ $? != 0 ]]; then
        echo "filtering for missing failed"
        exit 1
    fi
}

runSISRS(){
    if [[ "${cmds[*]}" =~ "${CMD}" ]]; then               # get pos in list of commands
        for (( i = 0; i < ${#cmds[@]}; i++ )); do
            if [[ "${cmds[$i]}" == "${CMD}" ]]; then
                break
            fi
        done
    else
        i=0
    fi
    for (( i = $i; i < ${#cmds[@]}; i++ )); do      #run from selected opt to end
        ${cmds[$i]}
    done
     
    #run as raxml -s "${MAINFOLDER}"/alignment_mX.phylip-relaxed -n <out> -m ASC_GTRGAMMA [--asc-corr=lewis] -T $1 -f a -p $RANDOM -N 100 -x $RANDOM
}

####################LOCI#######################

copyRefContigs(){
    grep -oe "[A-Z]*_*[0-9]*_*len[^/]*" "${MAINFOLDER}/alignment.nex" | uniq -c | sort -k1 -nr | awk '{print $2}' > "${MAINFOLDER}/loci.txt"
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/gfr/get_seq.py" '{}/contigs.fa' "${MAINFOLDER}/loci.txt" '{}/ref_genes.fa'  ::: "${FOLDERLISTA[@]}"
}

fromRefToSpRef(){
    grep \> "${MAINFOLDER}"/ref_genes.fa | sed 's/>//' |sort|uniq > "${MAINFOLDER}"/loci.txt
    bowtie2-build ${MAINFOLDER}/ref_genes.fa ${MAINFOLDER}/ref_genes      #index 
    
    #align reads to contigs
    for FILE in "${FILELIST[@]}"; do
        NAME=$( echo ${FILE} | sed s/${FILEID}// | sed 's/\.[^.]*$//' ) #includes folder but not the read or the extension
        echo ==== Aligning FILELIST ${NAME}  ====
        #N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${MAINFOLDER}/ref_genes -1 ${FILE} -2 $( echo ${FILE}|sed s/${FILEID}/${FILEID2}/ ) > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) | samtools -@ "${PROCESSORS}" view -Su -F 4 - | samtools sort -@ "${PROCESSORS}"- ${NAME}
    done
    for FILE in "${FILELISTU[@]}"; do
        NAME=$( echo ${FILE} | sed 's/\.[^.]*$//' ) #includes folder but not the read or the extension
        echo ==== Aligning FILELISTU ${NAME} ====
        #N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${MAINFOLDER}/ref_genes -U ${FILE} > >(tee ${NAME}_stdout.log) 2> >(tee ${NAME}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - ${NAME}
    done
    
    samtools faidx ${MAINFOLDER}/ref_genes.fa
    parallel --jobs "${PROCESSORS}" "samtools mpileup -f ${MAINFOLDER}/ref_genes.fa" '$( echo {} | sed s/${FILEID}// | sed 's/\.[^.]*$//' ).bam -A > $( echo {} | sed s/${FILEID}// | sed 's/\.[^.]*$//' ).pileups' ::: "${FILELIST[@]}" "${FILELISTU[@]}"
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/specific_genome.py" {} ${MAINFOLDER}/ref_genes.fa ::: "${FOLDERLISTA[@]}"    
    
    parallel --jobs "${PROCESSORS}" mv {}/contigs.fa {}/ref_genes.fa  ::: "${FOLDERLISTA[@]}"
}

gfr_aligntoConservedContigs(){
    parallel --jobs "${PROCESSORS}" bowtie2-build '{}/ref_genes.fa {}/ref_genes' ::: "${FOLDERLISTA[@]}"   #build index for conserved contigs
    find "${MAINFOLDER}"/*_loci/ -type f -name '*bam' | parallel -j "${PROCESSORS}" rm -f {}    #delete old bam
    
    for FOLDER in "${FOLDERLIST[@]}"; do
        for FILE in "${FOLDER}"/*${FILEID}*fastq; do
	    # output sorted bam file w/o unaligned reads - lots per folder
            echo Aligning ${FILE} to conserved contigs
	    bowtie2 -p "${PROCESSORS}" -N 1 --local -x "${FOLDER}"/ref_genes -1 ${FILE} -2 $( echo ${FILE}|sed s/${FILEID}/${FILEID2}/ ) > >(tee ${FILE/.fastq/}_stdout.log) 2> >(tee ${FILE/.fastq/}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - "$FOLDER"_loci/$(basename ${FILE/.fastq})  
        done
    done
    
    for FOLDER in "${FOLDERLISTU[@]}"; do
        for FILE in "${FOLDER}"/*reads*fastq; do
            bowtie2 -p "${PROCESSORS}" -N 1 --local -x "${FOLDER}"/ref_genes -U ${FILE} > >(tee ${FILE/.fastq/}_stdout.log) 2> >(tee ${FILE/.fastq/}_stderr.log >&2) | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - "$FOLDER"_loci/$(basename ${FILE/.fastq})  
        done        
    done
}

gfr_mergebam(){
    declare -a TOMERGE=()
    for FOLDER in "${FOLDERLISTA[@]}"; do
        rm -f "$FOLDER"_loci/merged.bam        # remove existing merged.bam file    
        if [[ $(ls -l "$FOLDER"_loci/*bam | wc -l) -eq 1 ]]; then      #if only one file just link
            F="$FOLDER"_loci/*bam
            ln $(echo "$F") "$FOLDER"_loci/merged.bam
        elif [[ $(ls -l "$FOLDER"_loci/*bam | wc -l) -gt 1 ]]; then
            TOMERGE+=("$FOLDER"_loci)
        fi
    done
    if [[ "${#TOMERGE[@]}" -gt 0 ]]; then
        parallel -j "${PROCESSORS}" samtools merge '{}/merged.bam {}/*.bam' ::: "${TOMERGE[@]}"
    fi
}

gfr_getAlleles(){
    parallel -j "${PROCESSORS}" samtools index {}_loci/merged.bam ::: "${FOLDERLISTA[@]}"
    parallel -j "${PROCESSORS}" "${DIR}/libexec/gfr/make_alignment_from_bam.py {}_loci/merged.bam ${MINREAD}" ::: "${FOLDERLISTA[@]}"  #takes bam file aligned to ref_genes for one species #outputs .fa file for all loci for one species
}

gfr_getAlignments(){
    ${DIR}/libexec/gfr/genealign_from_allgenes.py ${ALLELES} "${MAINFOLDER}"  #make files for each gene containing seq for each species
    
    for F in "${FOLDERLISTA[@]}"; do mv "${MAINFOLDER}"/loci/$(basename ${F}).fa "${MAINFOLDER}"/loci/$(basename ${F}).fasta; done   # move species fasta files so not aligned
        
    find "${MAINFOLDER}"/loci/ -type f -name '*fa' | parallel -j "${PROCESSORS}" "mafft {} > {.}_align.fa"      #align
    
}

gfr_trimLoci(){
   
    find "${MAINFOLDER}"/loci/ -type f -name '*align.fa' | parallel -j "${PROCESSORS}" "${DIR}/libexec/gfr/convert_formats.py {} fasta phylip-relaxed"     #convert to phy
    
    find "${MAINFOLDER}"/loci/ -type f -name '*_align.phylip-relaxed' | parallel -j "${PROCESSORS}" "${DIR}/libexec/gfr/trim_post_alignment.py {} ${#FOLDERLISTA[@]}"    #trim ends
}

gfr_selectLoci_MV(){
    #pick out loci by most variable in alignment.nex
    COUNT=0
    POS=1
    if [[ -e "${MAINFOLDER}"/loci/newpartitionsMV.txt ]]; then rm "${MAINFOLDER}"/loci/newpartitionsMV.txt; fi
    if [[ -e "${MAINFOLDER}"/loci/phy_filesMV.txt ]]; then rm "${MAINFOLDER}"/loci/phy_filesMV.txt; fi
    
    while read i; do

        F=${i}_align.phylip-relaxed
        if [[ -e "${MAINFOLDER}"/loci/$F ]]; then
            COUNT=$(( $COUNT + 1 ))
            GLENGTH=$(head -1 "${MAINFOLDER}"/loci/$F|awk '{print $2}')
            echo DNA, p${COUNT}=${POS}-$((${POS}-1+${GLENGTH})) >> "${MAINFOLDER}"/loci/newpartitionsMV.txt           #get partitions
            POS=$((${POS}+${GLENGTH}))
            echo "${MAINFOLDER}"/loci/$F >> "${MAINFOLDER}"/loci/phy_filesMV.txt
            if [[ $POS -gt ${OUTLENGTH} ]]; then
                break
            fi
        fi
    done < "${MAINFOLDER}"/loci.txt
}

gfr_selectLoci_MS(){
    #pick out loci by most species, then most variable in alignment.nex
    COUNT=0
    POS=1
    if [[ -e "${MAINFOLDER}"/loci/newpartitionsMS.txt ]]; then rm "${MAINFOLDER}"/loci/newpartitionsMS.txt; fi
    if [[ -e "${MAINFOLDER}"/loci/phy_filesMS.txt ]]; then rm "${MAINFOLDER}"/loci/phy_filesMS.txt; fi
    
    for ((NUMSP="${#FOLDERLISTA[@]}";NUMSP>1;NUMSP--)); do
        while read i; do
            F=${i}_align.phylip-relaxed
            if [[ -e "${MAINFOLDER}"/loci/$F ]]; then
                if [[ $(head -1 "${MAINFOLDER}"/loci/$F|awk '{print $1}') -eq ${NUMSP} ]]; then
                    COUNT=$(( $COUNT + 1 ))
                    GLENGTH=$(head -1 "${MAINFOLDER}"/loci/$F|awk '{print $2}')
                    echo DNA, p${COUNT}=${POS}-$((${POS}-1+${GLENGTH})) >> "${MAINFOLDER}"/loci/newpartitionsMS.txt           #get partitions
                    POS=$((${POS}+${GLENGTH}))
                    echo "${MAINFOLDER}"/loci/$F >> "${MAINFOLDER}"/loci/phy_filesMS.txt
                    if [[ $POS -gt 500000 ]] ; then
                        break
                    fi
                fi
            fi
        done < "${MAINFOLDER}"/loci.txt
        if [[ $POS -gt ${OUTLENGTH} ]] ; then
            break
        fi
    done
}
  
gfr_catLoci(){    
    ${DIR}/libexec/gfr/concatenate_phy.py "${MAINFOLDER}"/loci/phy_filesMS.txt "${MAINFOLDER}"/loci/concat_lociMS.phylip-relaxed "${FOLDERLISTA[@]}"        #concatenate selected loci for raxml analysis
    ${DIR}/libexec/gfr/concatenate_phy.py "${MAINFOLDER}"/loci/phy_filesMV.txt "${MAINFOLDER}"/loci/concat_lociMV.phylip-relaxed "${FOLDERLISTA[@]}"
    #run as raxml -r <known_tree> -M -m GTRGAMMA -p $RANDOM -T <num_threads> -q "${MAINFOLDER}"/loci/newpartitions.txt -s "${MAINFOLDER}"/loci/concat_loci.phylip-relaxed -n <out_name>
    
    ${DIR}/libexec/gfr/convert_formats.py "${MAINFOLDER}"/loci/concat_lociMS.phylip-relaxed phylip-relaxed mega       #convert format to mega for reltime
    ${DIR}/libexec/gfr/convert_formats.py "${MAINFOLDER}"/loci/concat_lociMV.phylip-relaxed phylip-relaxed mega       #convert format to mega for reltime
}

runGFR(){
    for FOLDER in "${FOLDERLISTA[@]}"; do
        if [ ! -d "$FOLDER"_loci ]; then
            mkdir "$FOLDER"_loci
        fi
    done
    
    gfr_aligntoConservedContigs
    gfr_mergebam
    
    if [ ! -d "${MAINFOLDER}"/loci ]; then
        mkdir "${MAINFOLDER}"/loci
    else
        find "${MAINFOLDER}"/loci/ -type f -name '*' | parallel -j "${PROCESSORS}" "rm -f {}"    #delete old loci
    fi
    
    gfr_getAlleles
    gfr_getAlignments
    gfr_trimLoci
    gfr_selectLoci_MV
    gfr_selectLoci_MS
    gfr_catLoci
}

####################RUN####################
if [[ $CMD = "sites" ]] || [[ "${cmds[*]}" =~ $CMD ]]; then
    # Run SISRS only
    echo "**** SISRS ****"
    runSISRS
elif [[ $CMD = "loci" ]]; then
    # Run SISRS with loci (GFR). First check if alignment.nex and/or ref_genes.fa. If there is no alignment.nex then rerun SISRS to produce file. 
    if [[ -f "${FOLDERLISTA[0]}"/ref_genes.fa ]]; then
        echo "** Running SISRS loci **"
    elif [[ -f "${MAINFOLDER}"/alignment.nex ]]; then
        echo "** Missing reference, getting from SISRS sites alignment **"
	copyRefContigs  # Get ref_genes.fa from previous sisrs run
    elif [[ -f "${MAINFOLDER}"/ref_genes.fa ]]; then
        echo "** Getting species specific references **"
        fromRefToSpRef        
    else
        # need to rerun SISRS from scratch to get ref_genes.fa
        echo "** Missing alignment and reference, running SISRS sites **"
        runSISRS
        copyRefContigs
    fi
    runGFR
else
    echo "You must specify sisrs sites or loci"
    exit 0
fi

SIZE_OF_CONTIGS=$(du -h -k ${MAINFOLDER}/"${CONTIGS}"/contigs.fa | cut -f1)

Number_of_Contigs=$(grep -c '>' ${MAINFOLDER}/"${CONTIGS}"/contigs.fa)

N_50=$(${DIR}/libexec/gfr/get_N50.py ${MAINFOLDER}/"${CONTIGS}"/contigs.fa)

DATA_SET_FILE_PATH=$(pwd)

END=$(date +%s)
TIME=$(( $END - $START ))

echo "$DATA_SET_FILE_PATH" "$SIZE_OF_CONTIGS" "${ASSEMBLER}" "${PROCESSORS}" "${GENOMESIZE}" "$TIME" "$N_50" "$Number_of_Contigs" "$bi_sin_var " "${KMER}" "${MISSING}" >> metrics_file.txt

if [[ DEBUG -eq 1 ]]; then
    echo "DIRS          = ${DIRS}"
    echo "DIR           = ${DIR}"
    echo "MAINFOLDER    = ${MAINFOLDER}"
    echo "FILELIST      = ${FILELIST[@]}"
    echo "FOLDERLIST    = ${FOLDERLIST[@]}"
    echo "FILELISTA     = ${FILELISTA}"
    echo "FILELISTU     = ${FILELISTU[@]}"
    echo "FILELISTA[@]  = ${FILELISTA[@]}"
    echo "#FILELISTU[@] = ${#FILELISTU[@]}"
    echo "FOLDERLISTA   = ${FOLDERLISTA}"
    echo "MISSING       = ${MISSING}"
fi